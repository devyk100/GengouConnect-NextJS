// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DB_HOST")
}

enum UserType {
  Learner
  Instructor
}

enum RegisterMethod {
  Google
  Github
  Email
}

model User {
  id                           Int                            @id @default(sequence())
  user_id                      String                         @unique
  name                         String
  user_type                    UserType
  email_id                     String                         @unique
  phone                        String                         @unique
  profile_picture              String
  password                     String
  register_method              RegisterMethod
  is_verified                  Boolean
  lessons                      Lesson[]
  contents                     ExternalContentItem[]
  LiveClassToInstructorMapping LiveClassToInstructorMapping[]
  LiveClassToLearnersMapping   LiveClassToLearnersMapping[]
  ConversationUserMapping      ConversationToUserMapping[]
  ConversationChat             ConversationChat[]
  past_experiences             String?
  CourseToInstructorMapping    CourseToInstructorMapping[]
  CourseToLearnerMapping       CourseToLearnerMapping[]

  @@index([user_id])
  @@index([email_id])
  @@index([phone])
}

// -------------------------------------- User, normal chats, and lessons and courses -----------------------------------------

model Conversation {
  id                        Int                         @id @default(sequence())
  title                     String
  ConversationToUserMapping ConversationToUserMapping[]
  ConversationChat          ConversationChat[]
}

model ConversationToUserMapping {
  id                 Int          @id @default(sequence())
  conversation_id    Int
  conversation       Conversation @relation(fields: [conversation_id], references: [id])
  user_id            String
  User               User         @relation(fields: [user_id], references: [user_id])
  send_permission    Boolean
  receive_permission Boolean

  @@index([conversation_id])
  @@index([user_id])
  @@index([conversation_id, user_id])
}

model ConversationChat {
  id              Int          @id @default(sequence())
  conversation_id Int
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  content         String
  user_id         String
  User            User         @relation(fields: [user_id], references: [user_id])
  timestamp       DateTime
  image_url       String?
  document_s3_url String?
  video_s3_url    String?

  @@index([conversation_id])
  @@index([user_id])
  @@index([conversation_id, user_id])
}

model Course {
  id                     Int      @id @default(sequence())
  language               String
  title                  String
  content                String
  one_time_price         Int?
  monthly_price          Int?
  one_time_price_premium Int?
  monthly_price_premium  Int?
  demo_content           String?
  testimonials           String?
  Lesson                 Lesson[]
  total_marks            Int

  @@index([one_time_price_premium])
  @@index([one_time_price])
  @@index([monthly_price])
  @@index([monthly_price_premium])
}

model CourseToInstructorMapping {
  id      Int    @id @default(sequence())
  user_id String
  user    User   @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model CourseToLearnerMapping {
  id                  Int    @id @default(sequence())
  user_id             String
  course_graded_marks Int
  user                User   @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([course_graded_marks])
}

// -------------------------------------------------------------------------------------------------------------

// ----------------------------------- Lessons and interactivity with questions, and other assignments ---------------
model Lesson {
  id                  Int    @id @default(sequence())
  by_id               String
  user                User   @relation(fields: [by_id], references: [user_id])
  course_id           Int
  course              Course @relation(fields: [course_id], references: [id])
  lessonToPageMapping Page[]

  @@index([by_id])
  @@index([course_id])
  @@index([course_id, by_id])
}

model Page {
  id              Int                   @id @default(sequence())
  content         String
  lesson_id       Int
  lesson          Lesson                @relation(fields: [lesson_id], references: [id])
  questions       QuestionItem[]
  externalcontent ExternalContentItem[]
  page_no         Int

  @@index([page_no])
  @@index([lesson_id])
}

enum ExternalContentType {
  pdf
  video
  youtube_video
  url
  image
  document
}

model ExternalContentItem {
  id      Int    @id @default(sequence())
  title   String
  s3_url  String
  by      String
  user_id String
  page_id Int
  page    Page   @relation(fields: [page_id], references: [id])
  user    User   @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([page_id])
}

enum QuestionItemType {
  FillInTheBlanks
  SingleChoiceQuestion
  MultiChoiceQuestion
  FillWholeSentence
}

enum ChoiceAnswerOptions {
  a
  b
  c
  d
}

model QuestionItem {
  id                          Int                          @id @default(sequence())
  title                       String
  type                        QuestionItemType
  item_id                     Int // any of the following bottom types
  page_id                     Int?
  assignment_id               Int?
  page                        Page?                        @relation(fields: [page_id], references: [id])
  assignmenttoquestionmapping AssignmentToQuestionMapping? @relation(fields: [assignment_id], references: [id])
  questionitemscore           QuestionItemScore[]
  total_score                 Int

  @@index([page_id])
  @@index([item_id])
  @@index([total_score])
}

model QuestionItemScore {
  id               Int     @id @default(sequence())
  remarks          String?
  score            Int     @default(-1)
  percentage       Int // store in 100.00 --> 10000 10 thousand format
  question_item_id Int

  questionitem QuestionItem @relation(fields: [question_item_id], references: [id])

  @@index([question_item_id])
}

model FillInTheBlanksQuestion {
  id               Int                     @id @default(sequence())
  question         String
  possible_answers FillInTheBlanksAnswer[]
}

model FillInTheBlanksAnswer {
  id                      Int                     @id @default(sequence())
  possible_answer         String
  question_id             Int
  fillintheblanksquestion FillInTheBlanksQuestion @relation(fields: [question_id], references: [id])

  @@index([question_id])
}

model SingleChoiceQuestion {
  id               Int                  @id @default(sequence())
  question         String
  possible_answers SingleChoiceAnswer[]
  correct_answer   ChoiceAnswerOptions
}

model SingleChoiceAnswer {
  id                   Int                  @id @default(sequence())
  question_id          Int
  singlechoicequestion SingleChoiceQuestion @relation(fields: [question_id], references: [id])
  answer_string        String
  option               ChoiceAnswerOptions

  @@index([question_id])
}

model MultiChoiceQuestion {
  id       Int                 @id @default(sequence())
  question String
  options  MultiChoiceAnswer[]
}

model MultiChoiceAnswer {
  id                  Int                 @id @default(sequence())
  question_id         Int
  multichoicequestion MultiChoiceQuestion @relation(fields: [question_id], references: [id])
  answer_string       String
  is_correct          Boolean
  option              ChoiceAnswerOptions

  @@index([question_id])
}

model FillWholeSentenceQuestion {
  id                 Int                         @id @default(sequence())
  question_string    String
  possible_solutions FillWholeSentenceSolution[]
}

model FillWholeSentenceSolution {
  id                        Int                       @id @default(sequence())
  answer_string             String
  question_id               Int
  fillwholesentencequestion FillWholeSentenceQuestion @relation(fields: [question_id], references: [id])

  @@index([question_id])
}

model Assignment {
  id          Int    @id @default(sequence())
  title       String
  total_marks Int
  course_id   Int

  @@index([course_id])
  @@index([total_marks])
}

model AssignmentToQuestionMapping {
  id            Int            @id @default(sequence())
  question_id   Int
  question_item QuestionItem[]

  @@index([question_id])
}

// ------------------------------------------------------------------------------------------------------------

// -------------------------- Flashcards ----------------------------------------------------------------------
model FlashCardGroup {
  id            Int                  @id @default(sequence())
  title         String
  flashcard     FlashCard[]
  userflashcard UserFlashCardGroup[]
}

model FlashCard {
  id                 Int             @id @default(sequence())
  front_side         String
  back_side          String
  question_audio_url String?
  answer_audio_url   String?
  question_image_url String?
  answer_image_url   String?
  flashcardgroup_id  Int
  flashcardgroup     FlashCardGroup  @relation(fields: [flashcardgroup_id], references: [id])
  userflashcard      UserFlashCard[]
}

model UserFlashCardGroup {
  id                  Int             @id @default(sequence())
  flashcardgroup_id   Int
  flashcardgroup      FlashCardGroup  @relation(fields: [flashcardgroup_id], references: [id])
  graduating_interval Int
  easy_interval       Int
  new_cards_per_day   Int
  max_reviews_per_day Int
  learning_steps      BigInt // encode and decode it well
  userflashcard       UserFlashCard[]

  @@index([flashcardgroup_id])
}

model UserFlashCard {
  id                          Int                @id @default(sequence())
  userflashcardgroup_id       Int
  userflashcardgroup          UserFlashCardGroup @relation(fields: [userflashcardgroup_id], references: [id])
  flashcard_id                Int
  flashcard                   FlashCard          @relation(fields: [flashcard_id], references: [id])
  modified_front_side         String
  modified_back_side          String
  modified_question_audio_url String?
  modified_answer_audio_url   String?
  modified_question_image_url String?
  modified_answer_image_url   String?

  review_factor   Int // xx.xx --> xxxxx please, 100a
  review_interval Int

  @@index([flashcard_id])
  @@index([userflashcardgroup_id])
}

// ---------------------------------------------------------------------------------------------------

// --------------------------------------- LiveClass, Chats and Whiteboard ---------------------------

model LiveClass {
  id                           Int                            @id @default(sequence())
  title                        String
  liveclasstoinstructormapping LiveClassToInstructorMapping[]
  liveclasstolearnersmapping   LiveClassToLearnersMapping[]
  LiveChat                     LiveChat[]
  WhiteboardEvent              WhiteboardEvent[]
  WhiteboardSlide              WhiteboardSlide[]
  start_time                   DateTime
  end_time                     DateTime

  @@index([start_time])
}

model LiveClassToInstructorMapping {
  id            Int       @id @default(sequence())
  live_class_id Int
  user_id       String
  liveclass     LiveClass @relation(fields: [live_class_id], references: [id])
  user          User      @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([live_class_id])
  @@index([live_class_id, user_id])
}

model LiveClassToLearnersMapping {
  id            Int       @id @default(sequence())
  live_class_id Int
  user_id       String
  liveclass     LiveClass @relation(fields: [live_class_id], references: [id])
  user          User      @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([live_class_id])
  @@index([live_class_id, user_id])
}

model LiveChat {
  id            Int       @id @default(sequence())
  live_class_id Int
  by_user_id    String
  text          String
  diff_time     Int
  liveclass     LiveClass @relation(fields: [live_class_id], references: [id])

  @@index([live_class_id, id])
  @@index([live_class_id])
  @@index([by_user_id])
}

model WhiteboardEvent {
  id           Int       @id @default(sequence())
  diff_time    Int
  diff_content String
  liveclass_id Int
  liveclass    LiveClass @relation(fields: [liveclass_id], references: [id])

  @@index([liveclass_id])
}

model WhiteboardSlide {
  id           Int       @id @default(sequence())
  slide_no     Int
  liveclass_id Int
  liveclasss   LiveClass @relation(fields: [liveclass_id], references: [id])

  @@index([slide_no])
  @@index([liveclass_id])
  @@index([slide_no, liveclass_id])
}

// ------------------------------------------------------------------------------------------------------------------

// EugslGggG1nqiGzGj9N2nA
